-> Official documentation links: 
            -> https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/package-summary.html
            -> https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/LinkedBlockingQueue.html

BlockingQueue<E>: 
TaskQueues: When tasks are submitted to ExecutorService, if none of the threads in pool are available to process the tasks, they get stored in a queue, below are the different queue options to choose from.
            -> Unbounded Queue (LinkedBlockingQueue)
            -> Bounded  Queue (ArrayBlockingQueue)
            -> Priority  Queue (PriorityBlockingQueue)
            -> Synchronous  Queue (SynchronousQueue)

1. Unbounded Queue (LinkedBlockingQueue): An optionally-bounded blocking queue based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been on the queue the longest time. 
                                          The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the queue retrieval operations obtain elements at the head of the queue. 
                                          Linked queues typically have higher throughput than array-based queues but less predictable performance in most concurrent applications. BlockingQueue interface ensures thread-safe queue operations with blocking behavior.
                                    -> Syntax: public class LinkedBlockingQueue<E> extends AbstractQueue<E> implements BlockingQueue<E>, Serializable //E - the type of elements held in this collection
                                    -> A BlockingQueue is an interface which supports waiting (blocking) for space to become available (for producer) or for elements to be present (for consumer).
                                    -> Implementations classes: ArrayBlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue, etc.
                                    
                                                
